{
	"info": {
		"_postman_id": "6cb7877f-f627-4fa8-b3d8-1b7717ceea5c",
		"name": "YaMDb API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15416174"
	},
	"item": [
		{
			"name": "auth/",
			"item": [
				{
					"name": "signup/ Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Есть поле 'username'\", function () {",
									"        pm.expect(jsonData).to.have.property('username');",
									"    });",
									"    pm.test(\"Есть поле 'email'\", function () {",
									"        pm.expect(jsonData).to.have.property('email');",
									"    });",
									"",
									"    pm.test(\"Поле 'username' это строка\", () => {",
									"        pm.expect(jsonData.username).to.be.a(\"string\");",
									"    });",
									"    pm.test(\"Поле 'email' это строка\", () => {",
									"        pm.expect(jsonData.email).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 2\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(2);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"username\": \"{{username}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/auth/signup/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "token/ Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Есть поле 'token'\", function () {",
									"        pm.expect(jsonData).to.have.property('token');",
									"    });",
									"",
									"    pm.test(\"Поле 'token' это строка\", () => {",
									"        pm.expect(jsonData.token).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 1\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(1);",
									"    });",
									"",
									"    pm.test(\"Токен установлен в environment\", function () {",
									"        pm.environment.set(\"token\",jsonData.token);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"confirmation_code\": \"{{confirmation_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/auth/token/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users/",
			"item": [
				{
					"name": "me/",
					"item": [
						{
							"name": "Любой авторизованный пользователь",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var is200Response = responseCode.code === 200;",
											"",
											"if(is200Response){",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Есть поле 'username'\", function () {",
											"        pm.expect(jsonData).to.have.property('username');",
											"    });",
											"    pm.test(\"Поле 'username' это строка\", () => {",
											"        pm.expect(jsonData.username).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'email'\", function () {",
											"        pm.expect(jsonData).to.have.property('email');",
											"    });",
											"    pm.test(\"Поле 'email' это строка\", () => {",
											"        pm.expect(jsonData.email).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'first_name'\", function () {",
											"        pm.expect(jsonData).to.have.property('first_name');",
											"    });",
											"    pm.test(\"Поле 'first_name' это строка\", () => {",
											"        pm.expect(jsonData.first_name).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'last_name'\", function () {",
											"        pm.expect(jsonData).to.have.property('last_name');",
											"    });",
											"    pm.test(\"Поле 'last_name' это строка\", () => {",
											"        pm.expect(jsonData.last_name).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'bio'\", function () {",
											"        pm.expect(jsonData).to.have.property('bio');",
											"    });",
											"    pm.test(\"Поле 'bio' это строка\", () => {",
											"        pm.expect(jsonData.bio).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'role'\", function () {",
											"        pm.expect(jsonData).to.have.property('role');",
											"    });",
											"    pm.test(\"Поле 'role' это строка\", () => {",
											"        pm.expect(jsonData.role).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Количество полей в ответе - 6\", function () {",
											"        var count = Object.keys(jsonData).length;;",
											"        pm.expect(count).to.eql(6);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{API_URL}}/api/v1/users/me/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Любой авторизованный пользователь",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var is200Response = responseCode.code === 200;",
											"",
											"if(is200Response){",
											"    var jsonData = pm.response.json();",
											"    pm.test(\"Есть поле 'username'\", function () {",
											"        pm.expect(jsonData).to.have.property('username');",
											"    });",
											"    pm.test(\"Поле 'username' это строка\", () => {",
											"        pm.expect(jsonData.username).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'email'\", function () {",
											"        pm.expect(jsonData).to.have.property('email');",
											"    });",
											"    pm.test(\"Поле 'email' это строка\", () => {",
											"        pm.expect(jsonData.email).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'first_name'\", function () {",
											"        pm.expect(jsonData).to.have.property('first_name');",
											"    });",
											"    pm.test(\"Поле 'first_name' это строка\", () => {",
											"        pm.expect(jsonData.first_name).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'last_name'\", function () {",
											"        pm.expect(jsonData).to.have.property('last_name');",
											"    });",
											"    pm.test(\"Поле 'last_name' это строка\", () => {",
											"        pm.expect(jsonData.last_name).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'bio'\", function () {",
											"        pm.expect(jsonData).to.have.property('bio');",
											"    });",
											"    pm.test(\"Поле 'bio' это строка\", () => {",
											"        pm.expect(jsonData.bio).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Есть поле 'role'\", function () {",
											"        pm.expect(jsonData).to.have.property('role');",
											"    });",
											"    pm.test(\"Поле 'role' это строка\", () => {",
											"        pm.expect(jsonData.role).to.be.a(\"string\");",
											"    });",
											"",
											"    pm.test(\"Количество полей в ответе - 6\", function () {",
											"        var count = Object.keys(jsonData).length;;",
											"        pm.expect(count).to.eql(6);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"first_name\": \"Иванов\",\n  \"last_name\": \"Петр\",\n  \"bio\": \"студент\",\n  \"role\": \"moderator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/api/v1/users/me/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var user = data.results[0]",
									"        ",
									"        pm.test(\"Есть поле 'username'\", function () {",
									"            pm.expect(user).to.have.property('username');",
									"        });",
									"        pm.test(\"Поле 'username' это строка\", () => {",
									"            pm.expect(user.username).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'email'\", function () {",
									"            pm.expect(user).to.have.property('email');",
									"        });",
									"        pm.test(\"Поле 'email' это строка\", () => {",
									"            pm.expect(user.email).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'first_name'\", function () {",
									"            pm.expect(user).to.have.property('first_name');",
									"        });",
									"        pm.test(\"Поле 'first_name' это строка\", () => {",
									"            pm.expect(user.first_name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'last_name'\", function () {",
									"            pm.expect(user).to.have.property('last_name');",
									"        });",
									"        pm.test(\"Поле 'last_name' это строка\", () => {",
									"            pm.expect(user.last_name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'bio'\", function () {",
									"            pm.expect(user).to.have.property('bio');",
									"        });",
									"        pm.test(\"Поле 'bio' это строка\", () => {",
									"            pm.expect(user.bio).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'role'\", function () {",
									"            pm.expect(user).to.have.property('role');",
									"        });",
									"        pm.test(\"Поле 'role' это строка\", () => {",
									"            pm.expect(user.role).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Количество полей в `results` - 6\", function () {",
									"            var count = Object.keys(user).length;;",
									"            pm.expect(count).to.eql(6);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}/api/v1/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{{username}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Есть поле 'username'\", function () {",
									"        pm.expect(jsonData).to.have.property('username');",
									"    });",
									"    pm.test(\"Поле 'username' это строка\", () => {",
									"        pm.expect(jsonData.username).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'email'\", function () {",
									"        pm.expect(jsonData).to.have.property('email');",
									"    });",
									"    pm.test(\"Поле 'email' это строка\", () => {",
									"        pm.expect(jsonData.email).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'first_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('first_name');",
									"    });",
									"    pm.test(\"Поле 'first_name' это строка\", () => {",
									"        pm.expect(jsonData.first_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'last_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('last_name');",
									"    });",
									"    pm.test(\"Поле 'last_name' это строка\", () => {",
									"        pm.expect(jsonData.last_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'bio'\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('bio');",
									"    });",
									"    pm.test(\"Поле 'bio' это строка\", () => {",
									"        pm.expect(jsonData.bio).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'role'\", function () {",
									"        pm.expect(jsonData).to.have.property('role');",
									"    });",
									"    pm.test(\"Поле 'role' это строка\", () => {",
									"        pm.expect(jsonData.role).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 6\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(6);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{another_username}}\", \n  \"email\": \"{{another_email}}\",\n  \"first_name\": \"string\",\n  \"last_name\": \"string\",\n  \"bio\": \"string\",\n  \"role\": \"moderator\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						},
						"description": "с токеном"
					},
					"response": []
				},
				{
					"name": "{{another_username}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Есть поле 'username'\", function () {",
									"        pm.expect(jsonData).to.have.property('username');",
									"    });",
									"    pm.test(\"Поле 'username' это строка\", () => {",
									"        pm.expect(jsonData.username).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'email'\", function () {",
									"        pm.expect(jsonData).to.have.property('email');",
									"    });",
									"    pm.test(\"Поле 'email' это строка\", () => {",
									"        pm.expect(jsonData.email).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'first_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('first_name');",
									"    });",
									"    pm.test(\"Поле 'first_name' это строка\", () => {",
									"        pm.expect(jsonData.first_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'last_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('last_name');",
									"    });",
									"    pm.test(\"Поле 'last_name' это строка\", () => {",
									"        pm.expect(jsonData.last_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'bio'\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('bio');",
									"    });",
									"    pm.test(\"Поле 'bio' это строка\", () => {",
									"        pm.expect(jsonData.bio).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'role'\", function () {",
									"        pm.expect(jsonData).to.have.property('role');",
									"    });",
									"    pm.test(\"Поле 'role' это строка\", () => {",
									"        pm.expect(jsonData.role).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 6\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(6);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}/api/v1/users/{{another_username}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{another_username}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{another_username}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Есть поле 'username'\", function () {",
									"        pm.expect(jsonData).to.have.property('username');",
									"    });",
									"    pm.test(\"Поле 'username' это строка\", () => {",
									"        pm.expect(jsonData.username).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'email'\", function () {",
									"        pm.expect(jsonData).to.have.property('email');",
									"    });",
									"    pm.test(\"Поле 'email' это строка\", () => {",
									"        pm.expect(jsonData.email).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'first_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('first_name');",
									"    });",
									"    pm.test(\"Поле 'first_name' это строка\", () => {",
									"        pm.expect(jsonData.first_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'last_name'\", function () {",
									"        pm.expect(jsonData).to.have.property('last_name');",
									"    });",
									"    pm.test(\"Поле 'last_name' это строка\", () => {",
									"        pm.expect(jsonData.last_name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'bio'\", function () {",
									"        pm.expect(jsonData).to.have.property('bio');",
									"    });",
									"    pm.test(\"Поле 'bio' это строка\", () => {",
									"        pm.expect(jsonData.bio).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'role'\", function () {",
									"        pm.expect(jsonData).to.have.property('role');",
									"    });",
									"    pm.test(\"Поле 'role' это строка\", () => {",
									"        pm.expect(jsonData.role).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 6\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(6);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{another_username}}\",\n  \"email\": \"random@example.com\",\n  \"first_name\": \"patch_string\",\n  \"last_name\": \"patch_string\",\n  \"bio\": \"patch_string\",\n  \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/users/{{another_username}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{another_username}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{another_username}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}/api/v1/users/{{another_username}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{another_username}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'name'\", function () {",
									"        pm.expect(jsonData).to.have.property('name');",
									"    });",
									"    pm.test(\"Поле 'name' это строка\", () => {",
									"        pm.expect(jsonData.name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'slug'\", function () {",
									"        pm.expect(jsonData).to.have.property('slug');",
									"    });",
									"    pm.test(\"Поле 'slug' это строка\", () => {",
									"        pm.expect(jsonData.slug).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 2\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(2);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{categories_name}}\",\n  \"slug\": \"{{categories_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/categories/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is201Response = responseCode.code === 200;",
									"",
									"if(is201Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var category = data.results[0]",
									"",
									"        pm.test(\"Есть поле 'name'\", function () {",
									"            pm.expect(category).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' это строка\", () => {",
									"            pm.expect(category.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug'\", function () {",
									"            pm.expect(category).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'slug' это строка\", () => {",
									"            pm.expect(category.slug).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Количество полей в ответе - 2\", function () {",
									"            var count = Object.keys(category).length;;",
									"            pm.expect(count).to.eql(2);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/categories/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{{categories_name}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "genres/",
			"item": [
				{
					"name": "Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'name'\", function () {",
									"        pm.expect(jsonData).to.have.property('name');",
									"    });",
									"    pm.test(\"Поле 'name' это строка\", () => {",
									"        pm.expect(jsonData.name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'slug'\", function () {",
									"        pm.expect(jsonData).to.have.property('slug');",
									"    });",
									"    pm.test(\"Поле 'slug' это строка\", () => {",
									"        pm.expect(jsonData.slug).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 2\", function () {",
									"        var count = Object.keys(jsonData).length;;",
									"        pm.expect(count).to.eql(2);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{genre_name}}\",\n  \"slug\": \"{{genre_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/genres/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"genres",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is201Response = responseCode.code === 200;",
									"",
									"if(is201Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var category = data.results[0]",
									"",
									"        pm.test(\"Есть поле 'name'\", function () {",
									"            pm.expect(category).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' это строка\", () => {",
									"            pm.expect(category.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug'\", function () {",
									"            pm.expect(category).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'slug' это строка\", () => {",
									"            pm.expect(category.slug).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Количество полей в ответе - 2\", function () {",
									"            var count = Object.keys(category).length;;",
									"            pm.expect(count).to.eql(2);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/genres/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"genres",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "{{genre_name}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "title/",
			"item": [
				{
					"name": "Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var title = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(title).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(title.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'category'\", function () {",
									"        pm.expect(title).to.have.property('category');",
									"    });",
									"",
									"    if (title.category){",
									"        var category = title.category",
									"",
									"        pm.test(\"Есть поле 'name' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.slug).to.be.a(\"string\");",
									"        });",
									"    }",
									"    pm.test(\"Есть поле 'genre'\", function () {",
									"        pm.expect(title).to.have.property('genre');",
									"    });",
									"",
									"    if (title.genre.length){",
									"        var genre = title.genre[0]",
									"",
									"        pm.test(\"Есть поле 'name' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.slug).to.be.a(\"string\");",
									"        });",
									"    };",
									"",
									"    pm.test(\"Есть поле 'name'\", function () {",
									"        pm.expect(title).to.have.property('name');",
									"    });",
									"    pm.test(\"Поле 'name' это строка\", () => {",
									"        pm.expect(title.name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'year'\", function () {",
									"        pm.expect(title).to.have.property('year');",
									"    });",
									"    pm.test(\"Поле 'year' это число\", () => {",
									"        pm.expect(title.year).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'description'\", function () {",
									"        pm.expect(title).to.have.property('description');",
									"    });",
									"    pm.test(\"Поле 'description' это строка\", () => {",
									"        pm.expect(title.description).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'rating'\", function () {",
									"        pm.expect(title).to.have.property('rating');",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 7\", function () {",
									"        var count = Object.keys(title).length;;",
									"        pm.expect(count).to.eql(7);",
									"    });",
									"",
									"    pm.test(\"'title_id' установлен в environment\", function () {",
									"        pm.environment.set(\"title_id\",title.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{title_name}}\",\n  \"year\": {{title_year}},\n  \"description\": \"description about \",\n  \"genre\": [\n    \"{{genre_slug}}\"\n  ],\n  \"category\": \"{{categories_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var title = data.results[0]",
									"        pm.test(\"Есть поле 'id'\", function () {",
									"            pm.expect(title).to.have.property('id');",
									"        });",
									"        pm.test(\"Поле 'id' это число\", () => {",
									"            pm.expect(title.id).to.be.a(\"Number\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'category'\", function () {",
									"            pm.expect(title).to.have.property('category');",
									"        });",
									"",
									"        if (title.category){",
									"            var category = title.category",
									"",
									"            pm.test(\"Есть поле 'name' в словаре 'category'\", function () {",
									"                pm.expect(category).to.have.property('name');",
									"            });",
									"            pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"                pm.expect(category.name).to.be.a(\"string\");",
									"            });",
									"",
									"            pm.test(\"Есть поле 'slug' в словаре 'category'\", function () {",
									"                pm.expect(category).to.have.property('slug');",
									"            });",
									"            pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"                pm.expect(category.slug).to.be.a(\"string\");",
									"            });",
									"        }",
									"        pm.test(\"Есть поле 'genre'\", function () {",
									"            pm.expect(title).to.have.property('genre');",
									"        });",
									"",
									"        if (title.genre.length){",
									"            var genre = title.genre[0]",
									"",
									"            pm.test(\"Есть поле 'name' в списке 'genre'\", function () {",
									"                pm.expect(genre).to.have.property('name');",
									"            });",
									"            pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"                pm.expect(genre.name).to.be.a(\"string\");",
									"            });",
									"",
									"            pm.test(\"Есть поле 'slug' в списке 'genre'\", function () {",
									"                pm.expect(genre).to.have.property('slug');",
									"            });",
									"            pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"                pm.expect(genre.slug).to.be.a(\"string\");",
									"            });",
									"        };",
									"",
									"        pm.test(\"Есть поле 'name'\", function () {",
									"            pm.expect(title).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' это строка\", () => {",
									"            pm.expect(title.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'year'\", function () {",
									"            pm.expect(title).to.have.property('year');",
									"        });",
									"        pm.test(\"Поле 'year' это число\", () => {",
									"            pm.expect(title.year).to.be.a(\"Number\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'description'\", function () {",
									"            pm.expect(title).to.have.property('description');",
									"        });",
									"        pm.test(\"Поле 'description' это строка\", () => {",
									"            pm.expect(title.description).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'rating'\", function () {",
									"            pm.expect(title).to.have.property('rating');",
									"        });",
									"",
									"        pm.test(\"Количество полей в ответе - 7\", function () {",
									"            var count = Object.keys(title).length;;",
									"            pm.expect(count).to.eql(7);",
									"        });",
									"    };",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "{{categories_slug}}",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{title_name}}",
									"disabled": true
								},
								{
									"key": "genre",
									"value": "{{genre_slug}}",
									"disabled": true
								},
								{
									"key": "year",
									"value": "{{title_year}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{title_id}}/ Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var title = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(title).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(title.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'category'\", function () {",
									"        pm.expect(title).to.have.property('category');",
									"    });",
									"",
									"    if (title.category){",
									"        var category = title.category",
									"",
									"        pm.test(\"Есть поле 'name' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.slug).to.be.a(\"string\");",
									"        });",
									"    }",
									"    pm.test(\"Есть поле 'genre'\", function () {",
									"        pm.expect(title).to.have.property('genre');",
									"    });",
									"",
									"    if (title.genre.length){",
									"        var genre = title.genre[0]",
									"",
									"        pm.test(\"Есть поле 'name' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.slug).to.be.a(\"string\");",
									"        });",
									"    };",
									"",
									"    pm.test(\"Есть поле 'name'\", function () {",
									"        pm.expect(title).to.have.property('name');",
									"    });",
									"    pm.test(\"Поле 'name' это строка\", () => {",
									"        pm.expect(title.name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'year'\", function () {",
									"        pm.expect(title).to.have.property('year');",
									"    });",
									"    pm.test(\"Поле 'year' это число\", () => {",
									"        pm.expect(title.year).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'description'\", function () {",
									"        pm.expect(title).to.have.property('description');",
									"    });",
									"    pm.test(\"Поле 'description' это строка\", () => {",
									"        pm.expect(title.description).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'rating'\", function () {",
									"        pm.expect(title).to.have.property('rating');",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 7\", function () {",
									"        var count = Object.keys(title).length;;",
									"        pm.expect(count).to.eql(7);",
									"    });",
									"",
									"    pm.test(\"'title_id' установлен в environment\", function () {",
									"        pm.environment.set(\"title_id\",title.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{title_id}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var title = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(title).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(title.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'category'\", function () {",
									"        pm.expect(title).to.have.property('category');",
									"    });",
									"",
									"    if (title.category){",
									"        var category = title.category",
									"",
									"        pm.test(\"Есть поле 'name' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в словаре 'category'\", function () {",
									"            pm.expect(category).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в словаре 'category' это строка\", () => {",
									"            pm.expect(category.slug).to.be.a(\"string\");",
									"        });",
									"    }",
									"    pm.test(\"Есть поле 'genre'\", function () {",
									"        pm.expect(title).to.have.property('genre');",
									"    });",
									"",
									"    if (title.genre.length){",
									"        var genre = title.genre[0]",
									"",
									"        pm.test(\"Есть поле 'name' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('name');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.name).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'slug' в списке 'genre'\", function () {",
									"            pm.expect(genre).to.have.property('slug');",
									"        });",
									"        pm.test(\"Поле 'name' в списке 'genre' это строка\", () => {",
									"            pm.expect(genre.slug).to.be.a(\"string\");",
									"        });",
									"    };",
									"",
									"    pm.test(\"Есть поле 'name'\", function () {",
									"        pm.expect(title).to.have.property('name');",
									"    });",
									"    pm.test(\"Поле 'name' это строка\", () => {",
									"        pm.expect(title.name).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'year'\", function () {",
									"        pm.expect(title).to.have.property('year');",
									"    });",
									"    pm.test(\"Поле 'year' это число\", () => {",
									"        pm.expect(title.year).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'description'\", function () {",
									"        pm.expect(title).to.have.property('description');",
									"    });",
									"    pm.test(\"Поле 'description' это строка\", () => {",
									"        pm.expect(title.description).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'rating'\", function () {",
									"        pm.expect(title).to.have.property('rating');",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 7\", function () {",
									"        var count = Object.keys(title).length;;",
									"        pm.expect(count).to.eql(7);",
									"    });",
									"",
									"    pm.test(\"'title_id' установлен в environment\", function () {",
									"        pm.environment.set(\"title_id\",title.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"patch_name\",\n  \"year\": 2020,\n  \"description\": \"patch_description\",\n  \"genre\": [\n    \"{{genre_slug}}\"\n  ],\n  \"category\": \"{{categories_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "titles/{{title_id}}/reviews/",
			"item": [
				{
					"name": "Аутентифицированные пользователи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var review = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(review).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(review.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(review).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(review.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(review).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(review.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'score'\", function () {",
									"        pm.expect(review).to.have.property('score');",
									"    });",
									"    pm.test(\"Поле 'score' это число\", () => {",
									"        pm.expect(review.score).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(review).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(review.pub_date).to.be.a(\"string\");",
									"    });",
									"        pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(review.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 5\", function () {",
									"        var count = Object.keys(review).length;;",
									"        pm.expect(count).to.eql(5);",
									"    });",
									"",
									"    pm.test(\"'review_id' установлен в environment\", function () {",
									"        pm.environment.set(\"review_id\",review.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"string\",\n  \"score\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var review = data.results[0]",
									"        pm.test(\"Есть поле 'id'\", function () {",
									"            pm.expect(review).to.have.property('id');",
									"        });",
									"        pm.test(\"Поле 'id' это число\", () => {",
									"            pm.expect(review.id).to.be.a(\"Number\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'author'\", function () {",
									"            pm.expect(review).to.have.property('author');",
									"        });",
									"        pm.test(\"Поле 'author' это строка\", () => {",
									"            pm.expect(review.author).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'text'\", function () {",
									"            pm.expect(review).to.have.property('text');",
									"        });",
									"        pm.test(\"Поле 'text' это строка\", () => {",
									"            pm.expect(review.text).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'score'\", function () {",
									"            pm.expect(review).to.have.property('score');",
									"        });",
									"        pm.test(\"Поле 'score' это число\", () => {",
									"            pm.expect(review.score).to.be.a(\"Number\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'pub_date'\", function () {",
									"            pm.expect(review).to.have.property('pub_date');",
									"        });",
									"        pm.test(\"Поле 'pub_date' это строка\", () => {",
									"            pm.expect(review.pub_date).to.be.a(\"string\");",
									"        });",
									"        pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(review.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"        ",
									"        pm.test(\"Количество полей в ответе - 5\", function () {",
									"            var count = Object.keys(review).length;;",
									"            pm.expect(count).to.eql(5);",
									"        });",
									"",
									"        pm.test(\"'review_id' установлен в environment\", function () {",
									"            pm.environment.set(\"review_id\",review.id);",
									"        });",
									"    };",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{review_id}}/ Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var review = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(review).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(review.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(review).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(review.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(review).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(review.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'score'\", function () {",
									"        pm.expect(review).to.have.property('score');",
									"    });",
									"    pm.test(\"Поле 'score' это число\", () => {",
									"        pm.expect(review.score).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(review).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(review.pub_date).to.be.a(\"string\");",
									"    });",
									"    pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(review.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 5\", function () {",
									"        var count = Object.keys(review).length;;",
									"        pm.expect(count).to.eql(5);",
									"    });",
									"",
									"    pm.test(\"'review_id' установлен в environment\", function () {",
									"        pm.environment.set(\"review_id\",review.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{review_id}}/ Автор отзыва, модератор или администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var review = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(review).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(review.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(review).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(review.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(review).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(review.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'score'\", function () {",
									"        pm.expect(review).to.have.property('score');",
									"    });",
									"    pm.test(\"Поле 'score' это число\", () => {",
									"        pm.expect(review.score).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(review).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(review.pub_date).to.be.a(\"string\");",
									"    });",
									"    pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(review.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 5\", function () {",
									"        var count = Object.keys(review).length;;",
									"        pm.expect(count).to.eql(5);",
									"    });",
									"",
									"    pm.test(\"'review_id' установлен в environment\", function () {",
									"        pm.environment.set(\"review_id\",review.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"string2\",\n  \"score\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "titles/{{title_id}}/reviews/{{review_id}}/comments/",
			"item": [
				{
					"name": "Аутентифицированные пользователи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var is201Response = responseCode.code === 201;",
									"",
									"if(is201Response){",
									"    var comment = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(comment).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(comment.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(comment).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(comment.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(comment).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(comment.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(comment).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(comment.pub_date).to.be.a(\"string\");",
									"    });",
									"    pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(comment.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 4\", function () {",
									"        var count = Object.keys(comment).length;;",
									"        pm.expect(count).to.eql(4);",
									"    });",
									"",
									"    pm.test(\"'comment_id' установлен в environment\", function () {",
									"        pm.environment.set(\"comment_id\",comment.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/comments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var data = pm.response.json();",
									"    if (data.results.length){",
									"        var comment = data.results[0]",
									"        pm.test(\"Есть поле 'id'\", function () {",
									"            pm.expect(comment).to.have.property('id');",
									"        });",
									"        pm.test(\"Поле 'id' это число\", () => {",
									"            pm.expect(comment.id).to.be.a(\"Number\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'text'\", function () {",
									"            pm.expect(comment).to.have.property('text');",
									"        });",
									"        pm.test(\"Поле 'text' это строка\", () => {",
									"            pm.expect(comment.text).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'author'\", function () {",
									"            pm.expect(comment).to.have.property('author');",
									"        });",
									"        pm.test(\"Поле 'author' это строка\", () => {",
									"            pm.expect(comment.author).to.be.a(\"string\");",
									"        });",
									"",
									"        pm.test(\"Есть поле 'pub_date'\", function () {",
									"            pm.expect(comment).to.have.property('pub_date');",
									"        });",
									"        pm.test(\"Поле 'pub_date' это строка\", () => {",
									"            pm.expect(comment.pub_date).to.be.a(\"string\");",
									"        });",
									"        pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"            pm.expect(comment.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"        });",
									"",
									"        pm.test(\"Количество полей в ответе - 4\", function () {",
									"            var count = Object.keys(comment).length;;",
									"            pm.expect(count).to.eql(4);",
									"        });",
									"    };",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/comments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{comment_id}}/ Доступно без токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var comment = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(comment).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(comment.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(comment).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(comment.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(comment).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(comment.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(comment).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(comment.pub_date).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(comment.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 4\", function () {",
									"        var count = Object.keys(comment).length;;",
									"        pm.expect(count).to.eql(4);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/comments/{{comment_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{comment_id}}/ Автор комментария, модератор или администратор.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var is200Response = responseCode.code === 200;",
									"",
									"if(is200Response){",
									"    var comment = pm.response.json();",
									"",
									"    pm.test(\"Есть поле 'id'\", function () {",
									"        pm.expect(comment).to.have.property('id');",
									"    });",
									"    pm.test(\"Поле 'id' это число\", () => {",
									"        pm.expect(comment.id).to.be.a(\"Number\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'text'\", function () {",
									"        pm.expect(comment).to.have.property('text');",
									"    });",
									"    pm.test(\"Поле 'text' это строка\", () => {",
									"        pm.expect(comment.text).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'author'\", function () {",
									"        pm.expect(comment).to.have.property('author');",
									"    });",
									"    pm.test(\"Поле 'author' это строка\", () => {",
									"        pm.expect(comment.author).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Есть поле 'pub_date'\", function () {",
									"        pm.expect(comment).to.have.property('pub_date');",
									"    });",
									"    pm.test(\"Поле 'pub_date' это строка\", () => {",
									"        pm.expect(comment.pub_date).to.be.a(\"string\");",
									"    });",
									"    pm.test(\"Поле 'pub_date' соответствет  ISO 8601\", () => {",
									"        pm.expect(comment.pub_date).to.match (/^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/);",
									"    });",
									"",
									"    pm.test(\"Количество полей в ответе - 4\", function () {",
									"        var count = Object.keys(comment).length;;",
									"        pm.expect(count).to.eql(4);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"text_comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/comments/{{comment_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Удаление объектов после тестов",
			"item": [
				{
					"name": "{{comment_id}}/ Автор комментария, модератор или администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/comments/{{comment_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{review_id}}/ Автор отзыва, модератор или администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/reviews/{{review_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								"reviews",
								"{{review_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{title_id}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"patch_name\",\n  \"year\": -1,\n  \"description\": \"patch_description\",\n  \"genre\": [\n    \"{{genre_slug}}\"\n  ],\n  \"category\": \"{{categories_slug}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/titles/{{title_id}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{title_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{categories_slug}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}/api/v1/categories/{{categories_slug}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categories_slug}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "{{genre_slug}}/ Администратор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}/api/v1/genres/{{genre_slug}}/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"genres",
								"{{genre_slug}}",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "app_token",
			"value": ""
		}
	]
}